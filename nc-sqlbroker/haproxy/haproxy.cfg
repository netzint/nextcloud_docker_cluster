global
        #log /dev/log    local0
        #log /dev/log    local1 notice
        log stdout format raw local0
        #chroot /var/lib/haproxy
        #stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
        stats timeout 30s
        user root
        group root
        #daemon

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # Default ciphers to use on SSL-enabled listening sockets.
        # For more information, see ciphers(1SSL). This list is from:
        #  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
        # An alternative list with additional directives can be obtained from
        #  https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=haproxy
        ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
        ssl-default-bind-options no-sslv3

defaults
        log     global
        default-server init-addr none
        mode    http
        option  httplog
        option  dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
        #errorfile 400 /usr/local/etc/haproxy/errors/400.http
        #errorfile 403 /usr/local/etc/haproxy/errors/403.http
        #errorfile 408 /usr/local/etc/haproxy/errors/408.http
        #errorfile 500 /usr/local/etc/haproxy/errors/500.http
        #errorfile 502 /usr/local/etc/haproxy/errors/502.http
        #errorfile 503 /usr/local/etc/haproxy/errors/503.http
        #errorfile 504 /usr/local/etc/haproxy/errors/504.http
 
resolvers docker_resolver
        nameserver dns 127.0.0.1:53
        hold valid 1s

frontend mysql_cluster_frontend
    bind *:3306
    mode tcp
    option tcplog
    default_backend galera_cluster_backend

backend galera_cluster_backend

    mode tcp
    option tcpka
    balance leastconn
    
    server nc-db01 172.24.0.100:3306 resolvers docker_resolver check
    server nc-db02 172.24.0.101:3306 resolvers docker_resolver check

    # besser w√§re es mit DNS anstatt IP Adressen
    #server nc-db01 nc-db01:3306 resolvers docker_resolver check
    #server nc-db02 nc-db02:3306 resolvers docker_resolver check
